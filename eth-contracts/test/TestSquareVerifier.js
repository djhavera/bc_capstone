// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require('Verifier');
const json_proof = require('./final_proof/proof');
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
contract('TestSquareVerifier', accounts => {

    const account = accounts[0];

    describe('Testing Verifier', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account});
        });

        it('Test verification proof with accurate input', async function () {
            let verified = await this.contract.verifyTx.call(json_proof.proof.A, json_proof.proof.A_p, json_proof.proof.B, json_proof.proof.B_p, json_proof.proof.C, json_proof.proof.C_p, json_proof.proof.H, json_proof.proof.K, json_proof.input);
            console.log(verified);
            //console.logs(verified.logs[0].event);
            assert.equal(verified, false, "Incorrect proof");
        });
        it('Test verification with incorrect input', async function () {
            let k = ["0x1874833288e8168c06e047abbf876bd1563b658a02f68557c7a0215fc9066581", "0x2157aea92488b7b740ecc728d69c05accdfbac62c20262930f11c3424b4b709f"];
            let verified = await this.contract.verifyTx.call(json_proof.proof.A, k, json_proof.proof.B, json_proof.proof.B_p, json_proof.proof.C, json_proof.proof.C_p, json_proof.proof.H, json_proof.proof.K, json_proof.input);
            assert.equal(verified, false, "Correct proof");
        })
    });

})
