// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require('Verifier');
const json_proof = require('./final_proof/proof');
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
contract('Verifier', accounts => {

    const account = accounts[0];

    describe('Testing Verifier', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account});
        });

        it('Test verification proof with accurate input', async function () {

            //let isVerified = await this.contract.verifyTx.call(A,A_p, B, B_p, C, C_p, H, K, accurateProofInput,{from: account});
            const result = await this.contract.verifyTx( json_proof.proof.A, json_proof.proof.A_p, json_proof.proof.B, json_proof.proof.B_p, json_proof.proof.C, json_proof.proof.C_p, json_proof.proof.H, json_proof.proof.K, json_proof.proof.input, { from: account } ); 
            console.log('!!!!!!!!!!!!!!!!!!!A!!!!!!!!!!!!!!!!!!!!')
            console.log(proof);
            console.log(input);
           // console.log(result);
            //console.logs(result.logs[0].event);
            //assert.equal(result, false, "Incorrect proof");
           // assert.equal(isVerified, true, "Incorrect proof");
        });
/*
        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            let isVerified = await this.contract.verifyTx.call(A, A_p, B, B_p, C, C_p, H, K, inaccurateProofInput, {from: account});
            assert.equal(isVerified, false, "Correct proof");
        });*/
    });

})