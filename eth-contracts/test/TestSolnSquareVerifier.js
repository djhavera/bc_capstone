// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require('Verifier');
const json_proof = require('./final_proof/proof');
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
const proof_var = json_proof.proof;
const input_var= json_proof.input;
var SolnSquareVerifier = artifacts.require('SolnSquareVerifier');

contract('SolnSquareVerifier', accounts => {

  const account_one = accounts[0];
  const account_two = accounts[1];

  describe('Lets Test the Solution Square Verifier', function () {
    beforeEach(async function () {
      const _verifier = await Verifier.new({from: account_one});
      this.contract = await SolnSquareVerifier.new(_verifier.address, {from: account_one});
    });
    it('Can Mint ERC721', async function () {
      await this.contract.mintNFT(account_two, 2, proof_var.A, 
                                    proof_var.A_p, 
                                    proof_var.B, 
                                    proof_var.B_p, 
                                    proof_var.C, 
                                    proof_var.C_p, 
                                    proof_var.H, 
                                    proof_var.K, 
                                    input_var, {from: account_one});
        let owner = await this.contract.ownerOf(2);
        assert.equal(account_two, owner, "Token did not MINT.");
    });
        it('Test if can add duplicate solution', async function () {
            //calling with the same proof
            let isAlreadyAdded = false;
            try{
                await this.contract.addSolutionToArray(account_two, 2, A, A_p, B, B_p, C, C_p, H, K, correctProofInput);
                await this.contract.addSolutionToArray(account_two, 3, A, A_p, B, B_p, C, C_p, H, K, correctProofInput); 
            } catch(e) {
                isAlreadyAdded = true;
            }
            assert.equal(isAlreadyAdded, true, "Solution added twice");
        });
    });
});
